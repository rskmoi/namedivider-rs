name: Test Thread Safety (Reproduce macOS Crash)

on:
  workflow_dispatch:
  push:
    paths:
      - 'python/**'
      - 'namedivider-rs/**'
      - '.github/workflows/test-thread-safety.yml'
      - 'test_thread_crash.py'

jobs:
  test-thread-safety:
    name: Thread Safety Test on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          # macOS Intel (最も問題が発生しやすい環境)
          - os: macos-13
            python-version: "3.13"
            platform: "macOS Intel"
          # macOS Apple Silicon
          - os: macos-latest
            python-version: "3.13"
            platform: "macOS ARM64"
          # Linux (比較対象)
          - os: ubuntu-latest
            python-version: "3.13"
            platform: "Linux"
          # Windows (比較対象)
          - os: windows-latest
            python-version: "3.13"
            platform: "Windows"

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        submodules: recursive

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Reconstruct family_names.txt
      shell: bash
      run: |
        mkdir -p secret
        
        # Function to add newline if needed
        add_newline_if_needed() {
          local content
          content=$(cat)
          if [[ "$content" != *$'\n' ]]; then
            printf "%s\n" "$content"
          else
            printf "%s" "$content"
          fi
        }
        
        # Function to remove newline if needed  
        remove_newline_if_needed() {
          local content
          content=$(cat)
          if [[ "$content" == *$'\n' ]]; then
            printf "%s" "${content%$'\n'}"
          else
            printf "%s" "$content"
          fi
        }
        
        # Direct sequential output approach for perfect reconstruction
        {
          printf "%s" "${FAMILY_NAMES_PART_1}" | add_newline_if_needed
          printf "%s" "${FAMILY_NAMES_PART_2}" | add_newline_if_needed  
          printf "%s" "${FAMILY_NAMES_PART_3}" | add_newline_if_needed
          printf "%s" "${FAMILY_NAMES_PART_4}" | add_newline_if_needed
          printf "%s" "${FAMILY_NAMES_PART_5}" | add_newline_if_needed
          printf "%s" "${FAMILY_NAMES_PART_6}" | add_newline_if_needed
          printf "%s" "${FAMILY_NAMES_PART_7}" | add_newline_if_needed
          printf "%s" "${FAMILY_NAMES_PART_8}" | remove_newline_if_needed
        } > secret/family_names.txt
        
        cp secret/family_names.txt namedivider-rs/src/assets/family_names.txt
        
        # Verify reconstruction
        line_count=$(wc -l < namedivider-rs/src/assets/family_names.txt)
        if [ "$line_count" -eq 39999 ]; then
          echo "✓ family_names.txt reconstruction successful ($line_count lines)"
        else
          echo "✗ family_names.txt reconstruction failed: got $line_count lines, expected 39999"
          exit 1
        fi
      env:
        FAMILY_NAMES_PART_1: ${{ secrets.FAMILY_NAMES_PART_1 }}
        FAMILY_NAMES_PART_2: ${{ secrets.FAMILY_NAMES_PART_2 }}
        FAMILY_NAMES_PART_3: ${{ secrets.FAMILY_NAMES_PART_3 }}
        FAMILY_NAMES_PART_4: ${{ secrets.FAMILY_NAMES_PART_4 }}
        FAMILY_NAMES_PART_5: ${{ secrets.FAMILY_NAMES_PART_5 }}
        FAMILY_NAMES_PART_6: ${{ secrets.FAMILY_NAMES_PART_6 }}
        FAMILY_NAMES_PART_7: ${{ secrets.FAMILY_NAMES_PART_7 }}
        FAMILY_NAMES_PART_8: ${{ secrets.FAMILY_NAMES_PART_8 }}

    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
      with:
        toolchain: 1.75.0

    - name: Install build dependencies (macOS)
      if: runner.os == 'macOS'
      run: |
        echo "=== Installing build dependencies ==="
        if ! command -v cmake &> /dev/null; then
          brew install cmake
        fi
        echo "Installing OpenMP (libomp) for LightGBM..."
        brew install libomp
        LIBOMP_PREFIX=$(brew --prefix libomp)
        echo "OpenMP installed at: $LIBOMP_PREFIX"
        echo "LIBOMP_PREFIX=$LIBOMP_PREFIX" >> $GITHUB_ENV

    - name: Set macOS environment variables
      if: runner.os == 'macOS'
      run: |
        echo "LIBRARY_PATH=$LIBOMP_PREFIX/lib:$LIBRARY_PATH" >> $GITHUB_ENV
        echo "CPATH=$LIBOMP_PREFIX/include:$CPATH" >> $GITHUB_ENV
        echo "LDFLAGS=-L$LIBOMP_PREFIX/lib $LDFLAGS" >> $GITHUB_ENV
        echo "CPPFLAGS=-I$LIBOMP_PREFIX/include $CPPFLAGS" >> $GITHUB_ENV
        echo "RUSTFLAGS=-L $LIBOMP_PREFIX/lib" >> $GITHUB_ENV
        if [ "${{ matrix.os }}" = "macos-13" ]; then
          echo "MACOSX_DEPLOYMENT_TARGET=13.0" >> $GITHUB_ENV
        else
          echo "MACOSX_DEPLOYMENT_TARGET=14.0" >> $GITHUB_ENV
        fi

    - name: Install build dependencies (Linux)
      if: runner.os == 'Linux'
      run: |
        sudo apt-get update
        sudo apt-get install -y cmake clang libclang-dev llvm-dev

    - name: Install build dependencies (Windows)
      if: runner.os == 'Windows'
      run: |
        choco install cmake --installargs "ADD_CMAKE_TO_PATH=System"
        choco install llvm --version=19.1.5 --force

    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install maturin

    - name: Build namedivider-core wheel
      working-directory: python
      run: |
        echo "=== Building namedivider-core ==="
        maturin develop --release
      env:
        RUST_BACKTRACE: 1

    - name: Verify basic functionality
      run: |
        python -c "
        import namedivider_core
        print('✓ namedivider-core imported successfully')
        basic = namedivider_core.BasicNameDivider()
        result = basic.divide_name('田中太郎')
        print(f'✓ BasicNameDivider: {result}')
        gbdt = namedivider_core.GBDTNameDivider()
        result = gbdt.divide_name('佐藤花子')
        print(f'✓ GBDTNameDivider: {result}')
        print('✓ Basic functionality verified')
        "

    - name: Run thread safety test
      run: |
        echo "=== Running Thread Safety Test on ${{ matrix.platform }} ==="
        python python/tests/test_thread_crash.py
      env:
        PYTHONUNBUFFERED: 1
      continue-on-error: true
      id: thread_test

    - name: Run intensive thread stress test
      if: runner.os == 'macOS'
      run: |
        echo "=== Running Intensive Thread Stress Test (macOS only) ==="
        python -c "
        import namedivider_core
        import concurrent.futures
        import time
        
        print('🚨 Stress testing with shared GBDTNameDivider instance...')
        divider = namedivider_core.GBDTNameDivider()
        
        def stress_worker(worker_id):
            results = []
            for i in range(200):  # より多くの反復
                try:
                    result = divider.divide_name('菅義偉')
                    results.append(str(result))
                    # より短い間隔でスレッド競合を促進
                    time.sleep(0.0001)
                except Exception as e:
                    print(f'Worker {worker_id} error at iteration {i}: {e}')
                    raise
            return len(results)
        
        # より多くのスレッドで並行実行
        with concurrent.futures.ThreadPoolExecutor(max_workers=16) as executor:
            futures = [executor.submit(stress_worker, i) for i in range(16)]
            
            for i, future in enumerate(concurrent.futures.as_completed(futures, timeout=60)):
                try:
                    count = future.result()
                    print(f'✓ Stress worker {i}: processed {count} names')
                except Exception as e:
                    print(f'❌ Stress worker {i} crashed: {e}')
                    raise
        
        print('🎉 Stress test completed without crashes!')
        "
      continue-on-error: true
      id: stress_test

    - name: Analyze test results
      run: |
        echo "=== Test Analysis for ${{ matrix.platform }} ==="
        
        if [ "${{ steps.thread_test.outcome }}" = "success" ]; then
          echo "✅ Thread safety test: PASSED"
        else
          echo "❌ Thread safety test: FAILED"
        fi
        
        if [ "${{ runner.os }}" = "macOS" ]; then
          if [ "${{ steps.stress_test.outcome }}" = "success" ]; then
            echo "✅ Stress test: PASSED"
          else
            echo "❌ Stress test: FAILED (Expected on macOS with thread safety issues)"
          fi
        fi
        
        echo ""
        echo "Platform: ${{ matrix.platform }}"
        echo "Python: ${{ matrix.python-version }}"
        echo "Thread test outcome: ${{ steps.thread_test.outcome }}"
        if [ "${{ runner.os }}" = "macOS" ]; then
          echo "Stress test outcome: ${{ steps.stress_test.outcome }}"
        fi

    - name: Summary
      run: |
        echo "=== Final Summary ==="
        echo "This workflow is designed to reproduce the thread safety crash"
        echo "that occurs in namedivider-python tests on macOS."
        echo ""
        echo "Expected behavior:"
        echo "- macOS: High chance of crash/failure due to LightGBM thread safety"
        echo "- Linux/Windows: Should generally pass (different threading behavior)"
        echo ""
        echo "If this test consistently passes on macOS, the issue may be:"
        echo "1. Environment-specific (different from namedivider-python CI)"
        echo "2. Requires more specific conditions to reproduce"
        echo "3. Fixed by environmental differences in this CI setup"