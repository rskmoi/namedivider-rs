name: Test macOS Wheel Build

on:
  workflow_dispatch:

jobs:
  test-macos:
    name: Test macOS wheel build - Python 3.11
    runs-on: macos-latest
    
    steps:
    - uses: actions/checkout@v4

    - name: Set up Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: "3.11"

    - name: Set up Rust
      uses: dtolnay/rust-toolchain@stable
      with:
        toolchain: 1.75.0

    - name: Install system dependencies (macOS)
      run: |
        # Check if cmake is already installed to avoid unnecessary reinstall
        if ! command -v cmake &> /dev/null; then
          brew install cmake
        else
          echo "cmake already installed: $(cmake --version)"
        fi
        
        # Install OpenMP for LightGBM compilation
        echo "Installing OpenMP (libomp) for LightGBM..."
        brew install libomp
        
        # Set environment variables for OpenMP
        echo "Setting OpenMP environment variables..."
        export LIBRARY_PATH="/opt/homebrew/lib:$LIBRARY_PATH"
        export CPATH="/opt/homebrew/include:$CPATH"
        export LDFLAGS="-L/opt/homebrew/lib $LDFLAGS"
        export CPPFLAGS="-I/opt/homebrew/include $CPPFLAGS"
        
        # Also set for Intel Macs (x86_64)
        if [[ "$(uname -m)" == "x86_64" ]]; then
          export LIBRARY_PATH="/usr/local/lib:$LIBRARY_PATH"
          export CPATH="/usr/local/include:$CPATH"
          export LDFLAGS="-L/usr/local/lib $LDFLAGS"
          export CPPFLAGS="-I/usr/local/include $CPPFLAGS"
        fi
        
        echo "OpenMP installation completed"
        echo "LIBRARY_PATH=$LIBRARY_PATH"
        echo "CPATH=$CPATH"

    - name: Reconstruct family_names.txt
      run: |
        mkdir -p secret
        
        # Function to add newline if needed
        add_newline_if_needed() {
          local content
          content=$(cat)
          if [[ "$content" != *$'\n' ]]; then
            printf "%s\n" "$content"
          else
            printf "%s" "$content"
          fi
        }
        
        # Function to remove newline if needed  
        remove_newline_if_needed() {
          local content
          content=$(cat)
          if [[ "$content" == *$'\n' ]]; then
            printf "%s" "${content%$'\n'}"
          else
            printf "%s" "$content"
          fi
        }
        
        # Direct sequential output approach for perfect reconstruction
        {
          printf "%s" "${FAMILY_NAMES_PART_1}" | add_newline_if_needed
          printf "%s" "${FAMILY_NAMES_PART_2}" | add_newline_if_needed  
          printf "%s" "${FAMILY_NAMES_PART_3}" | add_newline_if_needed
          printf "%s" "${FAMILY_NAMES_PART_4}" | add_newline_if_needed
          printf "%s" "${FAMILY_NAMES_PART_5}" | add_newline_if_needed
          printf "%s" "${FAMILY_NAMES_PART_6}" | add_newline_if_needed
          printf "%s" "${FAMILY_NAMES_PART_7}" | add_newline_if_needed
          printf "%s" "${FAMILY_NAMES_PART_8}" | remove_newline_if_needed
        } > secret/family_names.txt
        
        cp secret/family_names.txt namedivider-rs/family_names.txt
        # Also copy to src/assets for rust-embed
        cp secret/family_names.txt namedivider-rs/src/assets/family_names.txt
      env:
        FAMILY_NAMES_PART_1: ${{ secrets.FAMILY_NAMES_PART_1 }}
        FAMILY_NAMES_PART_2: ${{ secrets.FAMILY_NAMES_PART_2 }}
        FAMILY_NAMES_PART_3: ${{ secrets.FAMILY_NAMES_PART_3 }}
        FAMILY_NAMES_PART_4: ${{ secrets.FAMILY_NAMES_PART_4 }}
        FAMILY_NAMES_PART_5: ${{ secrets.FAMILY_NAMES_PART_5 }}
        FAMILY_NAMES_PART_6: ${{ secrets.FAMILY_NAMES_PART_6 }}
        FAMILY_NAMES_PART_7: ${{ secrets.FAMILY_NAMES_PART_7 }}
        FAMILY_NAMES_PART_8: ${{ secrets.FAMILY_NAMES_PART_8 }}
      shell: bash

    - name: Debug family_names.txt reconstruction
      run: |
        echo "=== family_names.txt Debug Info ==="
        echo "File exists: $(test -f namedivider-rs/family_names.txt && echo 'YES' || echo 'NO')"
        echo "File size: $(wc -c < namedivider-rs/family_names.txt) bytes"
        echo "Line count: $(wc -l < namedivider-rs/family_names.txt)"
        echo "Expected line count: 39999"
        echo "First 3 lines:"
        head -3 namedivider-rs/family_names.txt || echo "Failed to read first lines"
        echo "Last 3 lines:"
        tail -3 namedivider-rs/family_names.txt || echo "Failed to read last lines"
        echo "File encoding info:"
        if command -v file &> /dev/null; then
          file namedivider-rs/family_names.txt
        else
          echo "file command not available on this system"
        fi
      shell: bash

    - name: Verify family_names.txt reconstruction
      run: |
        line_count=$(wc -l < namedivider-rs/family_names.txt)
        if [ "$line_count" -eq 39999 ]; then
          echo "✓ File reconstruction successful ($line_count lines)"
        else
          echo "✗ File reconstruction failed: got $line_count lines, expected 39999"
          exit 1
        fi
      shell: bash

    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        python -m pip install maturin

    - name: Build wheel with maturin
      working-directory: python
      env:
        LIBRARY_PATH: "/opt/homebrew/lib:/usr/local/lib"
        CPATH: "/opt/homebrew/include:/usr/local/include"
        LDFLAGS: "-L/opt/homebrew/lib -L/usr/local/lib"
        CPPFLAGS: "-I/opt/homebrew/include -I/usr/local/include"
        # Ensure Rust can find OpenMP for linking
        RUSTFLAGS: "-L /opt/homebrew/lib -L /usr/local/lib"
        # Alternative approach: set cargo config
        CARGO_TARGET_AARCH64_APPLE_DARWIN_RUSTFLAGS: "-L /opt/homebrew/lib"
        CARGO_TARGET_X86_64_APPLE_DARWIN_RUSTFLAGS: "-L /usr/local/lib"
      run: |
        # Debug: Show environment variables
        echo "=== Build Environment Debug ==="
        echo "LIBRARY_PATH: $LIBRARY_PATH"
        echo "CPATH: $CPATH"
        echo "LDFLAGS: $LDFLAGS"
        echo "CPPFLAGS: $CPPFLAGS"
        echo "RUSTFLAGS: $RUSTFLAGS"
        echo "Architecture: $(uname -m)"
        
        # Check if OpenMP libraries are available
        echo "=== OpenMP Library Check ==="
        if [[ "$(uname -m)" == "arm64" ]]; then
          echo "ARM64 Mac detected, checking Homebrew OpenMP:"
          ls -la /opt/homebrew/include/omp.h || echo "omp.h not found in /opt/homebrew/include/"
          ls -la /opt/homebrew/lib/libomp.* || echo "libomp not found in /opt/homebrew/lib/"
          echo "Setting ARM64 specific flags..."
          export RUSTFLAGS="-L /opt/homebrew/lib"
        else
          echo "Intel Mac detected, checking OpenMP:"
          ls -la /usr/local/include/omp.h || echo "omp.h not found in /usr/local/include/"
          ls -la /usr/local/lib/libomp.* || echo "libomp not found in /usr/local/lib/"
          echo "Setting x86_64 specific flags..."
          export RUSTFLAGS="-L /usr/local/lib"
        fi
        
        # Create cargo config to ensure proper linking
        mkdir -p .cargo
        cat > .cargo/config.toml << EOF
        [target.aarch64-apple-darwin]
        rustflags = ["-L", "/opt/homebrew/lib"]
        
        [target.x86_64-apple-darwin]
        rustflags = ["-L", "/usr/local/lib"]
        EOF
        
        echo "=== Cargo Config ==="
        cat .cargo/config.toml
        
        # Build wheel
        echo "=== Starting maturin build ==="
        python -m maturin build --release --out ../dist/

    - name: Upload wheel
      uses: actions/upload-artifact@v4
      with:
        name: wheel-macos-py3.11
        path: dist/*.whl

    - name: Test wheel installation
      env:
        RUST_BACKTRACE: 1
      run: |
        echo "=== Testing wheel installation ==="
        echo "Available wheels:"
        ls -la dist/*.whl
        
        echo "Installing wheel:"
        python -m pip install --force-reinstall dist/*.whl
        
        echo "Testing functionality..."
        # Use a Python script file to ensure proper encoding and parsing
        cat > test_wheel.py << 'TESTEOF'
        import namedivider_rust
        print('✓ Module imported successfully')
        
        # Test Basic divider
        try:
            print('Creating BasicNameDivider...')
            basic = namedivider_rust.BasicNameDivider()
            print('✓ BasicNameDivider created')
            result1 = basic.divide_name('田中太郎')
            print(f'Basic result: {result1}')
            assert str(result1) == '田中 太郎'
            print('✓ BasicNameDivider test passed')
        except Exception as e:
            print(f'✗ BasicNameDivider failed: {e}')
            raise
        
        # Test GBDT divider  
        try:
            print('Creating GBDTNameDivider...')
            gbdt = namedivider_rust.GBDTNameDivider()
            print('✓ GBDTNameDivider created')
            result2 = gbdt.divide_name('佐藤花子')
            print(f'GBDT result: {result2}')
            assert str(result2) == '佐藤 花子'
            print('✓ GBDTNameDivider test passed')
        except Exception as e:
            print(f'✗ GBDTNameDivider failed: {e}')
            raise
        
        print('✓ All tests passed on macOS with Python 3.11!')
        TESTEOF
        python test_wheel.py