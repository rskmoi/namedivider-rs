name: Build Multi-platform Wheels

on:
  workflow_dispatch:

jobs:
  build:
    name: Build wheel for ${{ matrix.python-version }} on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        # TEST MODE: Single environment only
        os: [ubuntu-latest]
        python-version: ["3.11"]
        # FULL MODE: Uncomment below for 20 environments
        # os: [ubuntu-latest, windows-latest, macos-13, macos-14]
        # python-version: ["3.9", "3.10", "3.11", "3.12", "3.13"]

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Set up Rust
      uses: dtolnay/rust-toolchain@stable
      with:
        toolchain: 1.75.0

    - name: Install system dependencies (Ubuntu)
      if: runner.os == 'Linux'
      run: |
        sudo apt-get update
        sudo apt-get install -y build-essential cmake

    - name: Install system dependencies (macOS)
      if: runner.os == 'macOS'
      run: |
        brew install cmake

    - name: Install system dependencies (Windows)
      if: runner.os == 'Windows'
      shell: cmd
      run: |
        choco install cmake --installargs 'ADD_CMAKE_TO_PATH=System'

    - name: Reconstruct family_names.txt
      run: |
        mkdir -p secret
        
        # Function to add newline if needed
        add_newline_if_needed() {
          local content
          content=$(cat)
          if [[ "$content" != *$'\n' ]]; then
            printf "%s\n" "$content"
          else
            printf "%s" "$content"
          fi
        }
        
        # Function to remove newline if needed  
        remove_newline_if_needed() {
          local content
          content=$(cat)
          if [[ "$content" == *$'\n' ]]; then
            printf "%s" "${content%$'\n'}"
          else
            printf "%s" "$content"
          fi
        }
        
        # Direct sequential output approach for perfect reconstruction
        {
          printf "%s" "${FAMILY_NAMES_PART_1}" | add_newline_if_needed
          printf "%s" "${FAMILY_NAMES_PART_2}" | add_newline_if_needed  
          printf "%s" "${FAMILY_NAMES_PART_3}" | add_newline_if_needed
          printf "%s" "${FAMILY_NAMES_PART_4}" | add_newline_if_needed
          printf "%s" "${FAMILY_NAMES_PART_5}" | add_newline_if_needed
          printf "%s" "${FAMILY_NAMES_PART_6}" | add_newline_if_needed
          printf "%s" "${FAMILY_NAMES_PART_7}" | add_newline_if_needed
          printf "%s" "${FAMILY_NAMES_PART_8}" | remove_newline_if_needed
        } > secret/family_names.txt
        
        cp secret/family_names.txt namedivider-rs/family_names.txt
      env:
        FAMILY_NAMES_PART_1: ${{ secrets.FAMILY_NAMES_PART_1 }}
        FAMILY_NAMES_PART_2: ${{ secrets.FAMILY_NAMES_PART_2 }}
        FAMILY_NAMES_PART_3: ${{ secrets.FAMILY_NAMES_PART_3 }}
        FAMILY_NAMES_PART_4: ${{ secrets.FAMILY_NAMES_PART_4 }}
        FAMILY_NAMES_PART_5: ${{ secrets.FAMILY_NAMES_PART_5 }}
        FAMILY_NAMES_PART_6: ${{ secrets.FAMILY_NAMES_PART_6 }}
        FAMILY_NAMES_PART_7: ${{ secrets.FAMILY_NAMES_PART_7 }}
        FAMILY_NAMES_PART_8: ${{ secrets.FAMILY_NAMES_PART_8 }}
      shell: bash

    - name: Debug family_names.txt reconstruction
      run: |
        echo "=== family_names.txt Debug Info ==="
        echo "File exists: $(test -f namedivider-rs/family_names.txt && echo 'YES' || echo 'NO')"
        echo "File size: $(wc -c < namedivider-rs/family_names.txt) bytes"
        echo "Line count: $(wc -l < namedivider-rs/family_names.txt)"
        echo "Expected line count: 39999"
        echo "First 3 lines:"
        head -3 namedivider-rs/family_names.txt || echo "Failed to read first lines"
        echo "Last 3 lines:"
        tail -3 namedivider-rs/family_names.txt || echo "Failed to read last lines"
        echo "File encoding info:"
        file namedivider-rs/family_names.txt || echo "file command failed"
      shell: bash

    - name: Verify family_names.txt reconstruction
      run: |
        line_count=$(wc -l < namedivider-rs/family_names.txt)
        if [ "$line_count" -eq 39999 ]; then
          echo "✓ File reconstruction successful ($line_count lines)"
        else
          echo "✗ File reconstruction failed: got $line_count lines, expected 39999"
          exit 1
        fi
      shell: bash

    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        python -m pip install maturin

    - name: Build wheel (Linux with cibuildwheel)
      if: runner.os == 'Linux'
      run: |
        python -m pip install cibuildwheel
        # Convert python version 3.11 -> cp311
        PYTHON_TAG=$(echo "${{ matrix.python-version }}" | sed 's/\.//g')
        echo "Building for cp${PYTHON_TAG}"
        export CIBW_BUILD="cp${PYTHON_TAG}-*"
        echo "CIBW_BUILD=${CIBW_BUILD}"
        python -m cibuildwheel python/ --output-dir dist/
      env:
        CIBW_MANYLINUX_X86_64_IMAGE: quay.io/pypa/manylinux2014_x86_64
        CIBW_MUSLLINUX_X86_64_IMAGE: quay.io/pypa/musllinux_1_2_x86_64
        CIBW_BEFORE_ALL_LINUX: |
          echo "=== Installing build dependencies ==="
          if command -v apk >/dev/null 2>&1; then
            echo "Detected: musllinux (Alpine)"
            apk add --no-cache cmake clang-dev llvm-dev build-base
            echo "Available libclang files:"
            find /usr -name '*libclang*' -type f 2>/dev/null | head -5
          else
            echo "Detected: manylinux"
            yum install -y cmake3 llvm-toolset-7-clang-devel llvm-toolset-7-llvm-devel
            ln -sf /usr/bin/cmake3 /usr/bin/cmake
            echo "=== CMake version ==="
            cmake --version
            
            echo "=== Finding clang and libclang ==="
            find /opt/rh/llvm-toolset-7 -name 'clang' -type f 2>/dev/null || echo 'clang not found'
            find /opt/rh/llvm-toolset-7 -name '*libclang*' -type f 2>/dev/null | head -3
            
            echo "=== Testing direct clang execution ==="
            /opt/rh/llvm-toolset-7/root/usr/bin/clang --version || echo 'direct clang execution failed'
          fi
          
          echo "=== Installing Rust ==="
          curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- --default-toolchain 1.75.0 -y
          source $HOME/.cargo/env
        CIBW_ENVIRONMENT_LINUX: 'PATH="$HOME/.cargo/bin:/opt/rh/llvm-toolset-7/root/usr/bin:$PATH" LIBCLANG_PATH="/opt/rh/llvm-toolset-7/root/usr/lib64"'
        CIBW_ENVIRONMENT_MUSLLINUX: 'PATH="$HOME/.cargo/bin:$PATH" LIBCLANG_PATH="/usr/lib/llvm20/lib/libclang.so.20.1.7"'
        CIBW_BEFORE_BUILD: "pip install maturin"

    - name: Build wheel (macOS/Windows with maturin)
      if: runner.os != 'Linux'
      working-directory: python
      run: |
        python -m maturin build --release --out ../dist/

    - name: Upload wheels
      uses: actions/upload-artifact@v4
      with:
        name: wheels-${{ matrix.os }}-py${{ matrix.python-version }}
        path: dist/*.whl

    - name: Test wheel installation
      env:
        RUST_BACKTRACE: 1
      run: |
        echo "=== Testing wheel installation ==="
        python -m pip install --force-reinstall dist/*.whl
        echo "Installed successfully, testing functionality..."
        python -c "
        import namedivider_rust
        print('✓ Module imported successfully')
        
        # Test Basic divider
        try:
          print('Creating BasicNameDivider...')
          basic = namedivider_rust.BasicNameDivider()
          print('✓ BasicNameDivider created')
          result1 = basic.divide_name('田中太郎')
          print(f'Basic result: {result1}')
          assert str(result1) == '田中 太郎'
          print('✓ BasicNameDivider test passed')
        except Exception as e:
          print(f'✗ BasicNameDivider failed: {e}')
          raise
        
        # Test GBDT divider  
        try:
          print('Creating GBDTNameDivider...')
          gbdt = namedivider_rust.GBDTNameDivider()
          print('✓ GBDTNameDivider created')
          result2 = gbdt.divide_name('佐藤花子')
          print(f'GBDT result: {result2}')
          assert str(result2) == '佐藤 花子'
          print('✓ GBDTNameDivider test passed')
        except Exception as e:
          print(f'✗ GBDTNameDivider failed: {e}')
          raise
        
        print('✓ All tests passed on ${{ matrix.os }} with Python ${{ matrix.python-version }}!')
        "

  collect-wheels:
    name: Collect all wheels
    needs: build
    runs-on: ubuntu-latest
    steps:
    - name: Download all wheel artifacts
      uses: actions/download-artifact@v4
      with:
        path: dist/

    - name: List all wheels
      run: |
        echo "=== Built Wheels ==="
        find dist/ -name "*.whl" -type f | sort
        echo ""
        echo "Total wheels built: $(find dist/ -name "*.whl" -type f | wc -l)"
        echo "Expected: 1 wheel (TEST MODE: ubuntu-latest + Python 3.11)"
        echo "FULL MODE: 20 wheels (4 platforms × 5 Python versions)"

    - name: Upload combined wheels
      uses: actions/upload-artifact@v4
      with:
        name: all-wheels-v0.2.0
        path: dist/*/*.whl